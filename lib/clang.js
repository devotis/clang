var _     = require('lodash');
var soap  = require('soap');
var async = require('async');

function Clang(config) {

  if (!(this instanceof Clang)) {
    return new Clang(config);
  }
  this.config = _.clone(config || {});
  this.api    = null;
}

Clang.prototype.init = function(callback) {
  var me = this;
  if (me.config.debug) {
    console.log('Creating SOAP client');
  }

  soap.createClient('https://secure.myclang.com/app/api/soap/public/index.php?wsdl', function(err, result) {
    if (err) {
      return callback(err);
    }

    if (me.config.debug) {
      console.log('SOAP client created');
    }
    me.api = result;

    callback(null);
  });
};

Clang.prototype.request = function(methodName, args, callback) {
  var me = this;
  var localArgs;

  if (arguments.length === 2) {
    callback = args;
    localArgs = {
      uuid: me.config.uuid
    };
  } else if (arguments.length === 3) {
    localArgs = _.assign({
      uuid: me.config.uuid
    }, args || {});
  } else {
    throw new Error('request takes 3 arguments: methodName, args (object) and callback function');
  }

  if (!localArgs.uuid) {
    return setImmediate(function() {
      callback(new Error('uuid missing. Provide it with the 2nd arguments object or with client instantiation. Hint: `var clang = new Clang({uuid: \'12345678-...\'})`'));
    });
  }

  async.waterfall([
    function async_init(callback){
      if (me.api) {
        return setImmediate(callback);
      }
      me.init(callback);
    },
    function async_request(callback){
      var fn = me.api[methodName];

      if (!fn) {
        return setImmediate(function() {
          callback(new Error('Undefined method `' + methodName + '`'));
        });
      }

      fn(localArgs, buildCallback(me.config, me.api, callback));
    }
  ], callback);
};

var setMethods = {
  CUSTOMER_SET: 'customerSet_getCustomers',
  MAILING_SET : 'mailingSet_getMailings',
  OPEN_SET    : 'openSet_getOpens',
  CLICK_SET   : 'clickSet_getClicks',
  BOUNCE_SET  : 'bounceSet_getBounces'
};

var normalizeResponse = function(config, result) {
  if (result.msg === true) {
    if (config.debug) {
      console.log('SOAP success');
    }
    return [{msg: true}];
  }

  var msgKeys = Object.keys(result.msg);
  if (msgKeys.length === 0) {
    if (config.debug) {
      console.log('No records found in SOAP response');
    }
    return [];
  }
  if (msgKeys.length === 1 && result.msg[msgKeys[0]] instanceof Array) {
    if (config.debug) {
      console.log('SOAP msg array returned'); //{ code: 0, msg: { Group: [Object] } }
    }
    return result.msg[msgKeys[0]];
  }
  if (result.msg) { // 1 record from x_getById or x_create
    if (config.debug) {
      console.log('SOAP msg object returned');
    }
    return [result.msg];
  }
};

/**
 * Use this callback builder for clang method that use a resource for the dataset. It deals with:
 * - getting a resource id status
 * - getting the data set when the resource is READY
 * - normalizing the response
 * @param api - is reference to a previously created soap client with Clang's wsdl and node-soap
 * @param callback - the method for handling the final data set
 */
var buildCallback = function (config, api, callback) {
  var me = this;

  return function apiCallback(err, result) {
    /*
      first result that indicate there's a recource looks like this:  { code: 0, msg: '210577' }
      second result of fetching resource status looks like this result looks like: {
        code: 0,
        msg: {
          id    : "147082",
          type  : "CUSTOMER_SET",
          status: "READY",
          size  : "1"
        }
      }
    */
    var resourceId;
    if (err) {
      console.log('SOAP error arrived', err.body);
    }

    //Check for actual SOAP Fault generated by callback in soap/lib/client line 152
    if (err) {
      if (err.body &&
          err.body.match(/<faultcode>107<\/faultcode>/) &&
          err.body.match(/customer already member of/) )
        return callback(null, [{msg: true, warning: err.body}]);
      return callback(err.body || err.message);
    }
    //Check for No SOAP Fault, but result code not 0
    if (result.code != 0) {
      return callback(new Error('No SOAP Fault, but result code not 0: ' + JSON.stringify(result.msg)));
    }
    //Check for No SOAP Fault, but result.msg = false (probably delete that didn't work out)
    if (result.msg === false) {
      return callback(new Error('No SOAP Fault, but result msg is false (delete failed?): ' + JSON.stringify(result.msg)));
    }
    //When resource is READY fetch the data using the resourceMethod
    if (result.msg.status === 'ERROR') {
      return callback(new Error('Error getting resource (probably incorrect x_getByObject request parameters)'));
    }
    //Check for result that should be fetched using new SOAP call
    if (typeof result.msg === 'string' || //first attempt trying if resource is READY
      result.msg.status === 'PROCESSING'  //next attempts trying if resource is READY
    ) {
      resourceId   = typeof result.msg === 'string' ? result.msg : result.msg.id;

      if (config.debug) {
        console.log('Invoking SOAP method to see if resourceId is READY: ' + resourceId);
      }
      api.resource_getById({
        uuid      : config.uuid,
        resourceId: resourceId
      }, apiCallback);
      return;
    }
    if (result.msg.status === 'READY') {
      resourceId = result.msg.id;

      if (config.debug) {
        console.log('Resource of resourceId: ' + resourceId + ' is READY ('+result.msg.size+ ' records)');
      }
      if (result.msg.size > 0) {
        api[setMethods[result.msg.type]]({
          uuid      : config.uuid,
          resourceId: resourceId,
          offset    : 0,
          size      : 50
        }, function (err, result) {
          if (err) {
            console.error('Error in getting resource set', JSON.stringify(err.stack));
          }
          callback(null, normalizeResponse(config, result));
        });
        return;
      }

      if (config.debug) {
        console.log('No records found in SOAP response');
      }
      return callback(null, []);
    }
    if (result.msg) {
      return callback(null, normalizeResponse(config, result));
    }

    return callback(new Error('Unexpected and unhandled response: ' + JSON.stringify(result.msg)));
  };
};

module.exports = Clang;